/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLArticle {
  id: string;
  title: string;
  content: string;
  createdTimestamp: number;
}

export type GQLPaginationContent = GQLArticle;

/** Use this to resolve union type PaginationContent */
export type GQLPossiblePaginationContentTypeNames = 'Article';

export interface GQLPaginationContentNameMap {
  PaginationContent: GQLPaginationContent;
  Article: GQLArticle;
}

export interface GQLPaginationResult {
  list: Array<GQLPaginationContent>;
  total: number;
}

export interface GQLPaginationInput {
  afterHash?: string;
  beforeHash?: string;
  page: number;
  pageSize: number;
}

export interface GQLArticleInput {
  title: string;
  content: string;
}

export interface GQLQuery {
  articles?: GQLPaginationResult;
  article?: GQLArticle;
}

export interface GQLMutation {
  createArticle?: GQLArticle;
  updateArticle?: GQLArticle;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Article?: GQLArticleTypeResolver;
  PaginationContent?: {
    __resolveType: GQLPaginationContentTypeResolver
  };
  
  PaginationResult?: GQLPaginationResultTypeResolver;
  Query?: GQLQueryTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLArticleTypeResolver<TParent = any> {
  id?: ArticleToIdResolver<TParent>;
  title?: ArticleToTitleResolver<TParent>;
  content?: ArticleToContentResolver<TParent>;
  createdTimestamp?: ArticleToCreatedTimestampResolver<TParent>;
}

export interface ArticleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ArticleToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ArticleToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ArticleToCreatedTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLPaginationContentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'Article' | Promise<'Article'>;
}
export interface GQLPaginationResultTypeResolver<TParent = any> {
  list?: PaginationResultToListResolver<TParent>;
  total?: PaginationResultToTotalResolver<TParent>;
}

export interface PaginationResultToListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface PaginationResultToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLQueryTypeResolver<TParent = any> {
  articles?: QueryToArticlesResolver<TParent>;
  article?: QueryToArticleResolver<TParent>;
}

export interface QueryToArticlesArgs {
  pagination: GQLPaginationInput;
}
export interface QueryToArticlesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToArticlesArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToArticleArgs {
  id: string;
}
export interface QueryToArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToArticleArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createArticle?: MutationToCreateArticleResolver<TParent>;
  updateArticle?: MutationToUpdateArticleResolver<TParent>;
}

export interface MutationToCreateArticleArgs {
  data: GQLArticleInput;
}
export interface MutationToCreateArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateArticleArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToUpdateArticleArgs {
  id: string;
  data: GQLArticleInput;
}
export interface MutationToUpdateArticleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateArticleArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}
